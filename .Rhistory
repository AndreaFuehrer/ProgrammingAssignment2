?solve
data<-matrix(2,2)
data
data<-matrix(1:2,2:3)
data
data2<-matrix(1:2,2:3)
View(data2)
View(data)
data<-matrix(nrow=2,ncol=2)
data<-matrix(1:4,nrow=2,ncol=2)
data
solve(data)
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
v<-(1:6)
v
makeVector(v)
cachemean(v)
View(data2)
w<-makevector(v)
w<-makeVector(v)
w
cachemean(w)
cachemean(w)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setSolve <- function(solve) m <<- solve
getSolve <- function() m
list(set = set, get = get,
setSolve = setSolve,
getSolve = getSolve)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getSolve()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setSolve(m)
m
}
data
a<-makeCacheMatrix(data)
cacheSolve(a)
cacheSolve(a)
